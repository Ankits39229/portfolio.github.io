export interface Project {
  id: string
  title: string
  description: string
  longDescription: string
  technologies: string[]
  features: string[]
  githubUrl?: string
  liveUrl?: string
  imageUrl: string
  screenshots: string[]
  status: "Completed" | "In Progress" | "Planning"
  category: string
  difficulty: "Beginner" | "Intermediate" | "Advanced"
  duration: string
  teamSize: number
  myRole: string
  challenges: string[]
  solutions: string[]
  learnings: string[]
  architecture: {
    frontend?: string[]
    backend?: string[]
    database?: string[]
    deployment?: string[]
    apis?: string[]
  }
  metrics?: {
    performance?: string
    users?: string
    uptime?: string
    coverage?: string
  }
}

export const projectsData: Record<string, Project[]> = {
  "web-development": [
    {
      id: "ecommerce-platform",
      title: "E-Commerce Platform",
      description: "Full-stack e-commerce solution with payment integration and admin dashboard",
      longDescription:
        "A comprehensive e-commerce platform built from scratch using modern web technologies. This project demonstrates full-stack development skills, including user authentication, payment processing, inventory management, and real-time order tracking. The platform features a responsive design, secure payment integration with Stripe, and a powerful admin dashboard for managing products, orders, and customers.",
      technologies: ["Next.js", "Node.js", "MongoDB", "Stripe", "Tailwind CSS", "JWT", "Cloudinary"],
      features: [
        "User authentication and authorization with JWT",
        "Product catalog with advanced search and filters",
        "Shopping cart with persistent storage",
        "Secure checkout process with Stripe integration",
        "Admin dashboard for product and order management",
        "Real-time order tracking and notifications",
        "Responsive design for all devices",
        "Image upload and optimization with Cloudinary",
        "Email notifications for order confirmations",
        "Inventory management system",
        "Customer reviews and ratings",
        "Wishlist functionality",
      ],
      githubUrl: "https://github.com/username/ecommerce-platform",
      liveUrl: "https://ecommerce-demo.vercel.app",
      imageUrl: "/placeholder.svg?height=400&width=600",
      screenshots: [
        "/placeholder.svg?height=300&width=500",
        "/placeholder.svg?height=300&width=500",
        "/placeholder.svg?height=300&width=500",
        "/placeholder.svg?height=300&width=500",
        "/placeholder.svg?height=300&width=500",
        "/placeholder.svg?height=300&width=500",
      ],
      status: "Completed",
      category: "web-development",
      difficulty: "Advanced",
      duration: "3 months",
      teamSize: 1,
      myRole: "Full-Stack Developer",
      challenges: [
        "Implementing secure payment processing with Stripe",
        "Managing complex state for shopping cart across sessions",
        "Optimizing database queries for product search and filtering",
        "Handling image uploads and optimization for product photos",
        "Creating a responsive design that works across all devices",
        "Implementing real-time order tracking and notifications",
      ],
      solutions: [
        "Used Stripe's secure payment APIs with webhook integration for reliable payment processing",
        "Implemented Redux Toolkit for state management with localStorage persistence",
        "Created efficient MongoDB indexes and aggregation pipelines for fast search",
        "Integrated Cloudinary for automatic image optimization and CDN delivery",
        "Used Tailwind CSS with mobile-first approach and extensive testing on various devices",
        "Built WebSocket connection for real-time updates and email notifications with Nodemailer",
      ],
      learnings: [
        "Advanced payment integration and security best practices",
        "Complex state management in large React applications",
        "Database optimization and query performance",
        "Image handling and CDN integration",
        "Real-time communication with WebSockets",
        "E-commerce business logic and user experience design",
      ],
      architecture: {
        frontend: ["Next.js", "React", "Tailwind CSS", "Redux Toolkit", "Framer Motion"],
        backend: ["Node.js", "Express.js", "JWT Authentication", "Stripe API", "Nodemailer"],
        database: ["MongoDB", "Mongoose ODM"],
        deployment: ["Vercel", "MongoDB Atlas", "Cloudinary CDN"],
        apis: ["Stripe Payment API", "Cloudinary API", "SendGrid Email API"],
      },
      metrics: {
        performance: "95+ Lighthouse Score",
        users: "500+ Test Users",
        uptime: "99.9%",
        coverage: "85% Test Coverage",
      },
    },
    {
      id: "task-management-app",
      title: "Task Management App",
      description: "Collaborative task management tool with real-time updates",
      longDescription:
        "A modern task management application designed for team collaboration. Built with React and Node.js, this application provides real-time updates, drag-and-drop functionality, and comprehensive project tracking. The app supports multiple projects, team member management, file attachments, and detailed analytics to help teams stay organized and productive.",
      technologies: ["React", "Express.js", "Socket.io", "PostgreSQL", "Material-UI", "JWT", "Multer"],
      features: [
        "Real-time collaboration with Socket.io",
        "Drag-and-drop task organization with React DnD",
        "Team member management and role-based access",
        "Project timeline tracking with Gantt charts",
        "File attachments with secure upload",
        "Push notification system",
        "Mobile responsive design",
        "Advanced filtering and search",
        "Time tracking and reporting",
        "Comment system for tasks",
        "Custom labels and priorities",
        "Export functionality for reports",
      ],
      githubUrl: "https://github.com/username/task-manager",
      liveUrl: "https://taskmanager-demo.vercel.app",
      imageUrl: "/placeholder.svg?height=400&width=600",
      screenshots: [
        "/placeholder.svg?height=300&width=500",
        "/placeholder.svg?height=300&width=500",
        "/placeholder.svg?height=300&width=500",
        "/placeholder.svg?height=300&width=500",
        "/placeholder.svg?height=300&width=500",
        "/placeholder.svg?height=300&width=500",
      ],
      status: "Completed",
      category: "web-development",
      difficulty: "Intermediate",
      duration: "2 months",
      teamSize: 1,
      myRole: "Full-Stack Developer",
      challenges: [
        "Implementing real-time updates without performance issues",
        "Creating smooth drag-and-drop functionality",
        "Managing complex relationships between users, projects, and tasks",
        "Handling file uploads securely",
        "Building responsive Gantt chart visualization",
        "Optimizing database queries for large datasets",
      ],
      solutions: [
        "Used Socket.io with room-based updates to minimize unnecessary data transfer",
        "Implemented React DnD with optimistic updates for smooth user experience",
        "Designed normalized PostgreSQL schema with proper foreign key relationships",
        "Used Multer with file type validation and secure storage",
        "Built custom Gantt chart component with D3.js for better performance",
        "Implemented pagination and lazy loading for large task lists",
      ],
      learnings: [
        "Real-time application architecture and WebSocket management",
        "Complex drag-and-drop interactions in React",
        "PostgreSQL advanced queries and relationships",
        "File upload security and storage best practices",
        "Data visualization with D3.js",
        "Performance optimization for real-time applications",
      ],
      architecture: {
        frontend: ["React", "Material-UI", "React DnD", "D3.js", "Socket.io Client"],
        backend: ["Express.js", "Socket.io", "JWT", "Multer", "bcrypt"],
        database: ["PostgreSQL", "Sequelize ORM"],
        deployment: ["Heroku", "AWS S3", "PostgreSQL Cloud"],
        apis: ["Socket.io", "File Upload API", "Email Notification API"],
      },
      metrics: {
        performance: "92 Lighthouse Score",
        users: "200+ Active Users",
        uptime: "99.5%",
        coverage: "78% Test Coverage",
      },
    },
    {
      id: "blog-cms",
      title: "Blog CMS",
      description: "Content management system for bloggers with markdown support",
      longDescription:
        "A modern content management system specifically designed for bloggers and content creators. This CMS features a powerful markdown editor with live preview, SEO optimization tools, and a clean, intuitive interface. Built with Next.js and Prisma, it provides excellent performance and developer experience while offering all the features needed for professional blogging.",
      technologies: ["Next.js", "Prisma", "MySQL", "NextAuth.js", "MDX", "Tailwind CSS", "Vercel"],
      features: [
        "Rich markdown editor with live preview",
        "SEO optimization tools and meta tag management",
        "User authentication with multiple providers",
        "Comment system with moderation",
        "Tag and category management",
        "Analytics dashboard with visitor insights",
        "Dark/light theme toggle",
        "Image optimization and lazy loading",
        "RSS feed generation",
        "Search functionality",
        "Social media integration",
        "Email newsletter subscription",
      ],
      githubUrl: "https://github.com/username/blog-cms",
      imageUrl: "/placeholder.svg?height=400&width=600",
      screenshots: [
        "/placeholder.svg?height=300&width=500",
        "/placeholder.svg?height=300&width=500",
        "/placeholder.svg?height=300&width=500",
        "/placeholder.svg?height=300&width=500",
        "/placeholder.svg?height=300&width=500",
        "/placeholder.svg?height=300&width=500",
      ],
      status: "In Progress",
      category: "web-development",
      difficulty: "Intermediate",
      duration: "1.5 months",
      teamSize: 1,
      myRole: "Full-Stack Developer",
      challenges: [
        "Creating a user-friendly markdown editor with live preview",
        "Implementing comprehensive SEO optimization features",
        "Building a flexible comment system with moderation",
        "Optimizing performance for content-heavy pages",
        "Creating an intuitive analytics dashboard",
        "Handling image uploads and optimization",
      ],
      solutions: [
        "Built custom markdown editor using CodeMirror with real-time preview",
        "Implemented automatic meta tag generation and structured data",
        "Created modular comment system with admin approval workflow",
        "Used Next.js ISR and image optimization for fast loading",
        "Integrated Google Analytics API for comprehensive insights",
        "Used Cloudinary for automatic image processing and CDN delivery",
      ],
      learnings: [
        "Advanced Next.js features like ISR and API routes",
        "Prisma ORM and database schema design",
        "SEO best practices and structured data",
        "Content management system architecture",
        "Analytics integration and data visualization",
        "Performance optimization for content sites",
      ],
      architecture: {
        frontend: ["Next.js", "React", "Tailwind CSS", "MDX", "CodeMirror"],
        backend: ["Next.js API Routes", "NextAuth.js", "Prisma"],
        database: ["MySQL", "Prisma ORM"],
        deployment: ["Vercel", "PlanetScale", "Cloudinary"],
        apis: ["Google Analytics API", "Social Media APIs", "Email Service API"],
      },
      metrics: {
        performance: "98 Lighthouse Score",
        users: "150+ Content Creators",
        uptime: "99.8%",
        coverage: "82% Test Coverage",
      },
    },
    {
      id: "weather-dashboard",
      title: "Weather Dashboard",
      description: "Interactive weather application with location-based forecasts",
      longDescription:
        "A comprehensive weather dashboard that provides detailed weather information, forecasts, and interactive maps. This application demonstrates API integration, data visualization, and responsive design principles. Users can search for locations, view current conditions, get extended forecasts, and explore weather patterns through interactive maps and charts.",
      technologies: ["React", "OpenWeather API", "Chart.js", "Leaflet", "CSS3", "Axios"],
      features: [
        "Current weather conditions with detailed metrics",
        "7-day weather forecast with hourly breakdown",
        "Interactive weather maps with multiple layers",
        "Location-based weather using geolocation",
        "Weather alerts and severe weather notifications",
        "Historical weather data and trends",
        "Customizable dashboard with widget system",
        "Multiple unit systems (metric/imperial)",
        "Favorite locations management",
        "Weather comparison between cities",
        "Offline support with cached data",
        "PWA capabilities for mobile installation",
      ],
      githubUrl: "https://github.com/username/weather-dashboard",
      liveUrl: "https://weather-dashboard-demo.vercel.app",
      imageUrl: "/placeholder.svg?height=400&width=600",
      screenshots: [
        "/placeholder.svg?height=300&width=500",
        "/placeholder.svg?height=300&width=500",
        "/placeholder.svg?height=300&width=500",
        "/placeholder.svg?height=300&width=500",
        "/placeholder.svg?height=300&width=500",
        "/placeholder.svg?height=300&width=500",
      ],
      status: "Completed",
      category: "web-development",
      difficulty: "Beginner",
      duration: "3 weeks",
      teamSize: 1,
      myRole: "Frontend Developer",
      challenges: [
        "Integrating multiple weather APIs for comprehensive data",
        "Creating responsive and interactive maps",
        "Handling geolocation and location search",
        "Building effective data visualizations",
        "Implementing offline functionality",
        "Optimizing performance with frequent API calls",
      ],
      solutions: [
        "Used OpenWeather API with fallback to alternative services",
        "Implemented Leaflet maps with custom markers and overlays",
        "Built location search with autocomplete and geolocation fallback",
        "Created custom Chart.js configurations for weather data",
        "Implemented service worker for offline caching",
        "Used debouncing and caching strategies to minimize API calls",
      ],
      learnings: [
        "Weather API integration and data processing",
        "Interactive map development with Leaflet",
        "Data visualization best practices",
        "Progressive Web App development",
        "Geolocation and location services",
        "Performance optimization for data-heavy applications",
      ],
      architecture: {
        frontend: ["React", "Chart.js", "Leaflet", "CSS3", "Service Worker"],
        backend: ["Weather APIs", "Geolocation API"],
        database: ["LocalStorage", "IndexedDB"],
        deployment: ["Vercel", "CDN"],
        apis: ["OpenWeather API", "Geolocation API", "Geocoding API"],
      },
      metrics: {
        performance: "94 Lighthouse Score",
        users: "1000+ Daily Users",
        uptime: "99.9%",
        coverage: "75% Test Coverage",
      },
    },
  ],
  cybersecurity: [
    {
      id: "vulnerability-scanner",
      title: "Web Vulnerability Scanner",
      description: "Automated tool for detecting common web application vulnerabilities",
      longDescription:
        "A comprehensive web vulnerability scanner designed to identify security flaws in web applications. This tool automates the detection of common vulnerabilities including SQL injection, XSS, CSRF, and other OWASP Top 10 issues. Built with Python, it features multi-threaded scanning, custom payload support, and detailed reporting capabilities for security professionals and developers.",
      technologies: ["Python", "Requests", "BeautifulSoup", "SQLAlchemy", "Flask", "Threading", "Regex"],
      features: [
        "SQL injection detection with multiple techniques",
        "Cross-site scripting (XSS) vulnerability scanning",
        "Directory traversal and path manipulation testing",
        "SSL/TLS configuration analysis and certificate validation",
        "Automated report generation with severity ratings",
        "Custom payload support for advanced testing",
        "Multi-threaded scanning for improved performance",
        "Web crawling for comprehensive site mapping",
        "Authentication bypass testing",
        "File inclusion vulnerability detection",
        "Command injection testing",
        "CSRF token validation",
      ],
      githubUrl: "https://github.com/username/vuln-scanner",
      imageUrl: "/placeholder.svg?height=400&width=600",
      screenshots: [
        "/placeholder.svg?height=300&width=500",
        "/placeholder.svg?height=300&width=500",
        "/placeholder.svg?height=300&width=500",
        "/placeholder.svg?height=300&width=500",
        "/placeholder.svg?height=300&width=500",
        "/placeholder.svg?height=300&width=500",
      ],
      status: "Completed",
      category: "cybersecurity",
      difficulty: "Advanced",
      duration: "2 months",
      teamSize: 1,
      myRole: "Security Researcher & Developer",
      challenges: [
        "Implementing accurate vulnerability detection with minimal false positives",
        "Creating efficient multi-threaded scanning without overwhelming target servers",
        "Developing comprehensive payload databases for different attack vectors",
        "Building reliable SSL/TLS analysis capabilities",
        "Handling various authentication mechanisms",
        "Creating detailed and actionable security reports",
      ],
      solutions: [
        "Developed signature-based detection with context analysis to reduce false positives",
        "Implemented thread pool with rate limiting and respectful scanning practices",
        "Built modular payload system with categorized attack vectors",
        "Used OpenSSL bindings for comprehensive certificate and configuration analysis",
        "Created authentication module supporting multiple login mechanisms",
        "Designed template-based reporting system with severity classification",
      ],
      learnings: [
        "Advanced web application security testing methodologies",
        "Multi-threaded programming and performance optimization",
        "SSL/TLS protocol analysis and certificate validation",
        "Web crawling and parsing techniques",
        "Security reporting and vulnerability classification",
        "Ethical hacking principles and responsible disclosure",
      ],
      architecture: {
        frontend: ["Flask Web Interface", "Bootstrap", "JavaScript"],
        backend: ["Python", "Flask", "Threading", "Requests"],
        database: ["SQLite", "SQLAlchemy"],
        deployment: ["Docker", "Linux Server"],
        apis: ["Custom REST API", "SSL Labs API"],
      },
      metrics: {
        performance: "500+ URLs/minute",
        users: "50+ Security Professionals",
        uptime: "99.7%",
        coverage: "90% OWASP Top 10",
      },
    },
    {
      id: "network-monitor",
      title: "Network Traffic Monitor",
      description: "Real-time network traffic analysis and intrusion detection system",
      longDescription:
        "A sophisticated network monitoring tool that provides real-time traffic analysis, anomaly detection, and intrusion detection capabilities. Built with Python and Scapy, this system captures and analyzes network packets, identifies suspicious patterns, and generates alerts for potential security threats. It features protocol analysis, bandwidth monitoring, and network topology mapping.",
      technologies: ["Python", "Scapy", "Wireshark", "Pandas", "Matplotlib", "SQLite", "Threading"],
      features: [
        "Real-time packet capture and analysis",
        "Traffic pattern analysis with statistical modeling",
        "Intrusion detection with signature and anomaly-based detection",
        "Protocol analysis for TCP, UDP, HTTP, DNS, and more",
        "Bandwidth monitoring and usage statistics",
        "Suspicious activity detection and alerting",
        "Network topology mapping and visualization",
        "Geolocation tracking for IP addresses",
        "Port scan detection and prevention",
        "DDoS attack identification",
        "Data exfiltration monitoring",
        "Custom rule engine for threat detection",
      ],
      githubUrl: "https://github.com/username/network-monitor",
      imageUrl: "/placeholder.svg?height=400&width=600",
      screenshots: [
        "/placeholder.svg?height=300&width=500",
        "/placeholder.svg?height=300&width=500",
        "/placeholder.svg?height=300&width=500",
        "/placeholder.svg?height=300&width=500",
        "/placeholder.svg?height=300&width=500",
        "/placeholder.svg?height=300&width=500",
      ],
      status: "In Progress",
      category: "cybersecurity",
      difficulty: "Advanced",
      duration: "3 months",
      teamSize: 1,
      myRole: "Network Security Developer",
      challenges: [
        "Handling high-volume network traffic without packet loss",
        "Implementing accurate anomaly detection with low false positives",
        "Creating efficient packet parsing and analysis algorithms",
        "Building real-time visualization for network data",
        "Developing comprehensive threat detection rules",
        "Optimizing performance for continuous monitoring",
      ],
      solutions: [
        "Implemented multi-threaded packet capture with ring buffers",
        "Used machine learning algorithms for baseline establishment and anomaly detection",
        "Optimized packet parsing with protocol-specific handlers",
        "Built real-time dashboard using WebSocket connections",
        "Created modular rule engine with YAML-based configuration",
        "Used memory mapping and efficient data structures for performance",
      ],
      learnings: [
        "Network protocol analysis and packet manipulation",
        "Real-time data processing and streaming analytics",
        "Machine learning for anomaly detection",
        "Network security monitoring best practices",
        "Performance optimization for high-throughput systems",
        "Intrusion detection system architecture",
      ],
      architecture: {
        frontend: ["Web Dashboard", "D3.js", "WebSocket"],
        backend: ["Python", "Scapy", "Threading", "Flask"],
        database: ["SQLite", "Time-series DB"],
        deployment: ["Linux Server", "Docker"],
        apis: ["Packet Capture API", "GeoIP API", "Threat Intelligence API"],
      },
      metrics: {
        performance: "10Gbps Traffic Analysis",
        users: "25+ Network Admins",
        uptime: "99.5%",
        coverage: "95% Threat Detection",
      },
    },
    {
      id: "password-auditor",
      title: "Password Security Auditor",
      description: "Tool for auditing password strength and detecting weak credentials",
      longDescription:
        "A comprehensive password auditing tool designed to help organizations assess and improve their password security posture. This application analyzes password policies, detects weak passwords, performs dictionary attacks, and provides detailed recommendations for improving password security. It includes integration with breach databases and supports various hash formats for comprehensive security assessment.",
      technologies: ["Python", "Hashlib", "John the Ripper", "Wordlists", "Tkinter", "SQLite", "Requests"],
      features: [
        "Password strength analysis with multiple criteria",
        "Dictionary attack simulation with custom wordlists",
        "Password policy compliance checking",
        "Breach database comparison (HaveIBeenPwned integration)",
        "Custom wordlist generation and management",
        "Hash cracking with multiple algorithms",
        "Detailed reporting and analytics dashboard",
        "GUI interface for easy operation",
        "Batch processing for large datasets",
        "Password pattern analysis",
        "Entropy calculation and complexity scoring",
        "Compliance reporting for security standards",
      ],
      githubUrl: "https://github.com/username/password-auditor",
      imageUrl: "/placeholder.svg?height=400&width=600",
      screenshots: [
        "/placeholder.svg?height=300&width=500",
        "/placeholder.svg?height=300&width=500",
        "/placeholder.svg?height=300&width=500",
        "/placeholder.svg?height=300&width=500",
        "/placeholder.svg?height=300&width=500",
        "/placeholder.svg?height=300&width=500",
      ],
      status: "Completed",
      category: "cybersecurity",
      difficulty: "Intermediate",
      duration: "1 month",
      teamSize: 1,
      myRole: "Security Tool Developer",
      challenges: [
        "Implementing efficient password strength algorithms",
        "Integrating with external breach databases securely",
        "Creating user-friendly GUI for complex security operations",
        "Handling large password datasets efficiently",
        "Developing accurate policy compliance checking",
        "Building comprehensive reporting system",
      ],
      solutions: [
        "Developed multi-factor password scoring system with weighted criteria",
        "Used secure API integration with rate limiting for breach checking",
        "Built intuitive Tkinter interface with progress indicators",
        "Implemented streaming processing for large files",
        "Created configurable policy engine with rule-based validation",
        "Designed template-based reporting with visual charts",
      ],
      learnings: [
        "Password security best practices and analysis techniques",
        "GUI development with Python Tkinter",
        "API integration and rate limiting strategies",
        "Data processing and analysis for security applications",
        "Cryptographic hash functions and password storage",
        "Security compliance and reporting standards",
      ],
      architecture: {
        frontend: ["Tkinter GUI", "Matplotlib Charts"],
        backend: ["Python", "Hashlib", "Requests"],
        database: ["SQLite", "CSV Processing"],
        deployment: ["Standalone Application", "Docker"],
        apis: ["HaveIBeenPwned API", "Password Breach APIs"],
      },
      metrics: {
        performance: "100K+ Passwords/minute",
        users: "75+ Security Teams",
        uptime: "99.9%",
        coverage: "15+ Hash Algorithms",
      },
    },
  ],
  "ai-ml": [
    {
      id: "chatbot-assistant",
      title: "AI Chatbot Assistant",
      description: "Intelligent chatbot with natural language processing capabilities",
      longDescription:
        "An advanced AI chatbot assistant that leverages natural language processing to understand user queries and provide intelligent, context-aware responses. Built with Python and integrated with OpenAI's GPT models, this chatbot features multi-language support, sentiment analysis, and learning capabilities. It can be integrated into websites, mobile apps, or used as a standalone application for customer support and information assistance.",
      technologies: ["Python", "OpenAI API", "NLTK", "Flask", "SQLite", "spaCy", "TensorFlow"],
      features: [
        "Natural language understanding with context awareness",
        "Multi-turn conversations with memory retention",
        "Multi-language support (English, Spanish, French, German)",
        "Sentiment analysis for emotional intelligence",
        "Intent recognition and entity extraction",
        "Learning from conversations for continuous improvement",
        "Integration with external APIs and knowledge bases",
        "Voice interaction support with speech-to-text",
        "Customizable personality and response styles",
        "Analytics dashboard for conversation insights",
        "Webhook integration for third-party services",
        "Fallback mechanisms for unknown queries",
      ],
      githubUrl: "https://github.com/username/ai-chatbot",
      liveUrl: "https://chatbot-demo.vercel.app",
      imageUrl: "/placeholder.svg?height=400&width=600",
      screenshots: [
        "/placeholder.svg?height=300&width=500",
        "/placeholder.svg?height=300&width=500",
        "/placeholder.svg?height=300&width=500",
        "/placeholder.svg?height=300&width=500",
        "/placeholder.svg?height=300&width=500",
        "/placeholder.svg?height=300&width=500",
      ],
      status: "Completed",
      category: "ai-ml",
      difficulty: "Advanced",
      duration: "2.5 months",
      teamSize: 1,
      myRole: "AI/ML Developer",
      challenges: [
        "Implementing context-aware conversation management",
        "Handling multiple languages with accurate translation",
        "Building effective intent recognition system",
        "Managing conversation state and memory",
        "Integrating voice recognition and synthesis",
        "Creating learning mechanisms from user interactions",
      ],
      solutions: [
        "Developed conversation context manager with sliding window approach",
        "Used Google Translate API with language detection for multi-language support",
        "Built custom NLU pipeline with spaCy and custom training data",
        "Implemented conversation state machine with Redis for session management",
        "Integrated Web Speech API and Google Speech-to-Text for voice features",
        "Created feedback loop system with reinforcement learning for improvement",
      ],
      learnings: [
        "Natural language processing and understanding techniques",
        "Conversation AI architecture and state management",
        "Machine learning model training and fine-tuning",
        "Voice recognition and synthesis integration",
        "Multi-language application development",
        "AI ethics and responsible AI development",
      ],
      architecture: {
        frontend: ["React", "Web Speech API", "Socket.io"],
        backend: ["Flask", "OpenAI API", "NLTK", "spaCy"],
        database: ["SQLite", "Redis"],
        deployment: ["Docker", "AWS", "Heroku"],
        apis: ["OpenAI GPT API", "Google Translate API", "Speech-to-Text API"],
      },
      metrics: {
        performance: "95% Intent Accuracy",
        users: "2000+ Conversations",
        uptime: "99.8%",
        coverage: "4 Languages Supported",
      },
    },
    {
      id: "image-classifier",
      title: "Image Classification System",
      description: "Deep learning model for automated image recognition and classification",
      longDescription:
        "A sophisticated image classification system using convolutional neural networks to automatically categorize and tag images with high accuracy. This project demonstrates deep learning expertise, featuring custom CNN architectures, transfer learning, and real-time image processing capabilities. The system can classify images across multiple categories and provides confidence scores for each prediction.",
      technologies: ["Python", "TensorFlow", "Keras", "OpenCV", "NumPy", "Matplotlib", "Flask"],
      features: [
        "Multi-class image classification with 95%+ accuracy",
        "Real-time image processing and prediction",
        "Custom CNN architecture with transfer learning",
        "Batch processing support for large datasets",
        "Confidence scoring and uncertainty quantification",
        "Data augmentation for improved model robustness",
        "Model performance metrics and evaluation tools",
        "Web interface for easy image upload and classification",
        "API endpoints for integration with other applications",
        "Support for multiple image formats (JPEG, PNG, TIFF)",
        "Preprocessing pipeline with normalization and resizing",
        "Model versioning and A/B testing capabilities",
      ],
      githubUrl: "https://github.com/username/image-classifier",
      imageUrl: "/placeholder.svg?height=400&width=600",
      screenshots: [
        "/placeholder.svg?height=300&width=500",
        "/placeholder.svg?height=300&width=500",
        "/placeholder.svg?height=300&width=500",
        "/placeholder.svg?height=300&width=500",
        "/placeholder.svg?height=300&width=500",
        "/placeholder.svg?height=300&width=500",
      ],
      status: "In Progress",
      category: "ai-ml",
      difficulty: "Advanced",
      duration: "3 months",
      teamSize: 1,
      myRole: "ML Engineer",
      challenges: [
        "Achieving high accuracy across diverse image categories",
        "Handling varying image qualities and sizes",
        "Optimizing model performance for real-time inference",
        "Managing large datasets and training pipelines",
        "Implementing effective data augmentation strategies",
        "Deploying models efficiently for production use",
      ],
      solutions: [
        "Used transfer learning with pre-trained ResNet and fine-tuning",
        "Implemented robust preprocessing pipeline with OpenCV",
        "Optimized model architecture and used TensorFlow Lite for inference",
        "Built data pipeline with TensorFlow Data API and parallel processing",
        "Applied advanced augmentation techniques including mixup and cutmix",
        "Containerized application with Docker and used model serving frameworks",
      ],
      learnings: [
        "Deep learning and convolutional neural network architectures",
        "Transfer learning and model fine-tuning techniques",
        "Computer vision preprocessing and augmentation strategies",
        "Model optimization and deployment best practices",
        "TensorFlow and Keras advanced features",
        "MLOps practices for model lifecycle management",
      ],
      architecture: {
        frontend: ["Flask Web App", "Bootstrap", "JavaScript"],
        backend: ["Python", "TensorFlow", "Keras", "OpenCV"],
        database: ["File System", "Model Registry"],
        deployment: ["Docker", "AWS EC2", "TensorFlow Serving"],
        apis: ["REST API", "TensorFlow Serving API"],
      },
      metrics: {
        performance: "95.2% Accuracy",
        users: "500+ Images Classified",
        uptime: "99.6%",
        coverage: "50+ Image Categories",
      },
    },
    {
      id: "data-analyzer",
      title: "Automated Data Analyzer",
      description: "Machine learning tool for automated data analysis and insights",
      longDescription:
        "An intelligent data analysis tool that automatically processes datasets, identifies patterns, generates insights, and creates visualizations without manual intervention. This system uses machine learning algorithms to understand data characteristics, detect anomalies, and provide actionable insights. It supports various data formats and provides automated reporting capabilities for business intelligence and data science applications.",
      technologies: ["Python", "Pandas", "Scikit-learn", "Matplotlib", "Seaborn", "Plotly", "Streamlit"],
      features: [
        "Automated data cleaning and preprocessing",
        "Pattern recognition and trend analysis",
        "Statistical analysis with hypothesis testing",
        "Predictive modeling with multiple algorithms",
        "Interactive visualizations and dashboards",
        "Automated report generation with insights",
        "Anomaly detection and outlier identification",
        "Feature importance analysis and selection",
        "Time series analysis and forecasting",
        "Correlation analysis and relationship mapping",
        "Data quality assessment and profiling",
        "Export capabilities for various formats",
      ],
      githubUrl: "https://github.com/username/data-analyzer",
      imageUrl: "/placeholder.svg?height=400&width=600",
      screenshots: [
        "/placeholder.svg?height=300&width=500",
        "/placeholder.svg?height=300&width=500",
        "/placeholder.svg?height=300&width=500",
        "/placeholder.svg?height=300&width=500",
        "/placeholder.svg?height=300&width=500",
        "/placeholder.svg?height=300&width=500",
      ],
      status: "Planning",
      category: "ai-ml",
      difficulty: "Intermediate",
      duration: "2 months",
      teamSize: 1,
      myRole: "Data Scientist",
      challenges: [
        "Handling diverse data formats and structures automatically",
        "Implementing robust data cleaning algorithms",
        "Creating meaningful visualizations for different data types",
        "Building accurate predictive models without manual tuning",
        "Generating actionable insights from complex datasets",
        "Ensuring scalability for large datasets",
      ],
      solutions: [
        "Built flexible data ingestion pipeline supporting multiple formats",
        "Developed rule-based and ML-based data cleaning algorithms",
        "Created adaptive visualization engine based on data characteristics",
        "Implemented AutoML pipeline with hyperparameter optimization",
        "Used natural language generation for insight explanations",
        "Designed distributed processing architecture for scalability",
      ],
      learnings: [
        "Automated machine learning and data science workflows",
        "Data preprocessing and cleaning techniques",
        "Statistical analysis and hypothesis testing",
        "Data visualization best practices",
        "Natural language generation for insights",
        "Scalable data processing architectures",
      ],
      architecture: {
        frontend: ["Streamlit", "Plotly", "Interactive Widgets"],
        backend: ["Python", "Pandas", "Scikit-learn"],
        database: ["File System", "Data Lake"],
        deployment: ["Streamlit Cloud", "Docker"],
        apis: ["Data Processing API", "Visualization API"],
      },
      metrics: {
        performance: "90% Automation Rate",
        users: "100+ Datasets Analyzed",
        uptime: "99.9%",
        coverage: "20+ Data Types",
      },
    },
  ],
}

export const getCategoryProjects = (category: string): Project[] => {
  return projectsData[category] || []
}

export const getAllProjects = (): Project[] => {
  return Object.values(projectsData).flat()
}

export const getProjectById = (id: string): Project | undefined => {
  return getAllProjects().find((project) => project.id === id)
}

export const getProjectBySlug = (category: string, projectId: string): Project | undefined => {
  const categoryProjects = getCategoryProjects(category)
  return categoryProjects.find((project) => project.id === projectId)
}
